<!DOCTYPE html>
<html>
    <head>
        <title>Life</title>
        <link rel="icon" href="https://pbs.twimg.com/profile_images/1103056143322996736/yFwE2PJv_400x400.png">
    </head>
    <body>

        <script src="https://cdnjs.cloudflare.com/ajax/libs/pixi.js/5.1.0/pixi.min.js"></script>
        <script>
            /*
            let Application = PIXI.Application,
                loader = PIXI.loader,
                resources = PIXI.loader.resources,
                Sprite = PIXI.Sprite,
                Graphics = PIXI.Graphics;

            let app = new Application({
                width: 500,
                height: 500,
                antialias: true,
                transparent: false,
                resolution: 1
            });

            let gameWidth = app.renderer.view.width;
            let gameHeight = app.renderer.view.Height;
            let tileSize = 100;

            document.body.appendChild(app.view);
            app.renderer.backgroundColor = 0xFFFFFF;
            app.renderer.view.style = "border:1px solid #000000;";

            // 5x5 grid draw squares
            */

            /*
             1. Any live cell with fewer than two live neighbours dies, as if by underpopulation.
             2. Any live cell with two or three live neighbours lives on to the next generation.
             3. Any live cell with more than three live neighbours dies, as if by overpopulation.
             4. Any dead cell with three live neighbours becomes a live cell, as if by reproduction.
            */

            let world = [
                [1, 1, 0, 1, 0],
                [0, 1, 1, 1, 1],
                [1, 0, 0, 1, 0],
                [0, 1, 1, 0, 0],
                [0, 1, 0, 1, 0]
            ];

            //test world
            world = [
                [1, 2, 3],
                [4, 5, 6],
                [7, 8, 9]
            ];

            let size = world.length;

            let drawWorld = () => {
                let string = "/---------------\\\n";
                for (let i = 0; i < world.length; i++) {
                    string += "|";
                    for (let j = 0; j < world[0].length; j++) {
                        string += " " + world[i][j] + " ";
                    }
                    string += "|" + "\n";
                }
                string += "\\---------------/\n";
                console.log(string);
            };

            let findNeighbors = (i, j) => {
                let neighbors = [];
                /*
                for (let i = 0; i < size; i++) {
                    for (let j = 0; j < size; j++) {
                */
                        // check corner cases
                        // top left
                        if (i == 0 && j == 0) {
                            neighbors.push(world[i][j + 1]);
                            neighbors.push(world[i + 1][j]);
                            neighbors.push(world[i + 1][j + 1]);
                        // top right
                        } else if (i == 0 && j == size - 1) {
                            neighbors.push(world[i][j - 1]);
                            neighbors.push(world[i + 1][j]);
                            neighbors.push(world[i + 1][j - 1]);
                        // bottom left
                        } else if (i == size - 1 && j == 0) {
                            neighbors.push(world[i - 1][j]);
                            neighbors.push(world[i - 1][j + 1]);
                            neighbors.push(world[i][j + 1]);
                        // bottom right
                        } else if (i == size - 1 && j == size - 1) {
                            neighbors.push(world[i][j - 1]);
                            neighbors.push(world[i - 1][j]);
                            neighbors.push(world[i - 1][j - 1]);
                        } else if (i != 0 && i != size - 1) {
                            neighbors.push(world[i - 1][j - 1]);
                            neighbors.push(world[i - 1][j]);
                            neighbors.push(world[i - 1][j + 1]);

                            neighbors.push(world[i][j - 1]);
                            neighbors.push(world[i][j + 1]);

                            neighbors.push(world[i + 1][j - 1]);
                            neighbors.push(world[i + 1][j]);
                            neighbors.push(world[i + 1][j + 1]);
                        } else {

                        }
                    //}
                        return neighbors;
              //  }
            };

            console.log(findNeighbors(2, 2));

            let step = () => {
                drawWorld();
            }

            setInterval(() => {
                step();
            }, 1000);

        </script>
    </body>
</html>
