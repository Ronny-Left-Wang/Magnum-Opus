<!DOCTYPE html>
<html>
    <head>
        <title>Life</title>
        <link rel="icon" href="https://pbs.twimg.com/profile_images/1103056143322996736/yFwE2PJv_400x400.png">
    </head>
    <body>
        <canvas id="game" width="5000" height="5000" style="border:1px solid #000000;"></canvas>

        <script src="https://cdnjs.cloudflare.com/ajax/libs/pixi.js/5.1.0/pixi.min.js"></script>
        <script>
            /*
            let Application = PIXI.Application,
                loader = PIXI.loader,
                resources = PIXI.loader.resources,
                Sprite = PIXI.Sprite,
                Graphics = PIXI.Graphics;

            let app = new Application({
                width: 500,
                height: 500,
                antialias: true,
                transparent: false,
                resolution: 1
            });

            let gameWidth = app.renderer.view.width;
            let gameHeight = app.renderer.view.Height;
            let tileSize = 100;

            document.body.appendChild(app.view);
            app.renderer.backgroundColor = 0xFFFFFF;
            app.renderer.view.style = "border:1px solid #000000;";

            // 5x5 grid draw squares
            */

            /*
             1. Any live cell with fewer than two live neighbours dies, as if by underpopulation.
             2. Any live cell with two or three live neighbours lives on to the next generation.
             3. Any live cell with more than three live neighbours dies, as if by overpopulation.
             4. Any dead cell with three live neighbours becomes a live cell, as if by reproduction.
            */

            let canvas = document.getElementById("game");
            let ctx = canvas.getContext("2d");

            let world = [
                [1, 1, 0, 1, 0],
                [0, 1, 1, 1, 1],
                [1, 0, 0, 1, 0],
                [0, 1, 1, 0, 0],
                [0, 1, 0, 1, 0]
            ];

            let size = world.length;

            let drawWorld = () => {
                let string = "/---------------\\\n";
                for (let i = 0; i < world.length; i++) {
                    string += "|";
                    for (let j = 0; j < world[0].length; j++) {
                        string += " " + world[i][j] + " ";
                    }
                    string += "|" + "\n";
                }
                string += "\\---------------/\n";
                return string;
            };

            let cellSize = 100;
            let drawGrid = () => {
                for (let i = 0; i < size * cellSize; i+=cellSize) {
                    for (let j = 0; j < size * cellSize; j+=cellSize) {
                        ctx.beginPath();
                        ctx.rect(i, j, cellSize, cellSize);
                        ctx.stroke();
                    }
                }
            };
            drawGrid();

            let getNeighbors = (i, j) => {
                let neighbors = [];
                // check corner cases
                // top left
                if (i == 0 && j == 0) {
                    neighbors.push(world[i][j + 1]);
                    neighbors.push(world[i + 1][j]);
                    neighbors.push(world[i + 1][j + 1]);
                // top right
                } else if (i == 0 && j == size - 1) {
                    neighbors.push(world[i][j - 1]);
                    neighbors.push(world[i + 1][j]);
                    neighbors.push(world[i + 1][j - 1]);
                // bottom left
                } else if (i == size - 1 && j == 0) {
                    neighbors.push(world[i - 1][j]);
                    neighbors.push(world[i - 1][j + 1]);
                    neighbors.push(world[i][j + 1]);
                // bottom right
                } else if (i == size - 1 && j == size - 1) {
                    neighbors.push(world[i][j - 1]);
                    neighbors.push(world[i - 1][j]);
                    neighbors.push(world[i - 1][j - 1]);
                // outter top side
                } else if (i == 0 && j > 0) {
                    neighbors.push(world[i][j - 1]);
                    neighbors.push(world[i][j + 1]);
                    neighbors.push(world[i + 1][j - 1]);
                    neighbors.push(world[i + 1][j]);
                    neighbors.push(world[i + 1][j + 1]);
                // left side edge
                } else if (i > 0 && j == 0) {
                    neighbors.push(world[i - 1][j]);
                    neighbors.push(world[i - 1][j + 1]);
                    neighbors.push(world[i][j + 1]);
                    neighbors.push(world[i + 1][j]);
                    neighbors.push(world[i + 1][j + 1]);
                // top side edge
                } else if (i == 0 && j > 0) {
                    neighbors.push(world[i][j - 1]);
                    neighbors.push(world[i][j + 1]);
                    neighbors.push(world[i + 1][j - 1]);
                    neighbors.push(world[i + 1][j]);
                    neighbors.push(world[i + 1][j + 1]);
                // right side edge
                } else if (i > 0 && j == size - 1) {
                    neighbors.push(world[i - 1][j - 1]);
                    neighbors.push(world[i - 1][j]);
                    neighbors.push(world[i][j - 1]);
                    neighbors.push(world[i + 1][j - 1]);
                    neighbors.push(world[i + 1][j]);
                // bottom side edge
                } else if (i == size - 1 && j > 0) {
                    neighbors.push(world[i - 1][j - 1]);
                    neighbors.push(world[i - 1][j]);
                    neighbors.push(world[i - 1][j + 1]);
                    neighbors.push(world[i][j - 1]);
                    neighbors.push(world[i][j + 1]);
                // everything except corners and sides
                } else {
                    neighbors.push(world[i - 1][j - 1]);
                    neighbors.push(world[i - 1][j]);
                    neighbors.push(world[i - 1][j + 1]);

                    neighbors.push(world[i][j - 1]);
                    neighbors.push(world[i][j + 1]);

                    neighbors.push(world[i + 1][j - 1]);
                    neighbors.push(world[i + 1][j]);
                    neighbors.push(world[i + 1][j + 1]);
                }
                return neighbors;
            };

            let makeAlive = (i, j) => {
                world[i][j] = 1;
                return 1;
            };

            let makeDead = (i, j) => {
                world[i][j] = 0;
                return 0;
            };

            let deadOrAlive = (i, j) => {
                let cell = world[i][j];
                if (cell == 0) {
                    return "Dead";
                } else {
                    return "Alive";
                }
            };

            let survival = () => {
                for (let i = 0; i < size; i++) {
                    for (let j = 0; j < size; j++) {
                        let cell = world[i][j];
                        let neighbors = getNeighbors(i, j);
                        let liveNeighbors = 0;
                        for (let k = 0; k < neighbors.length; k++) {
                            if (neighbors[k] == 1) {
                                liveNeighbors++;
                            }
                        }
                        if (cell == 1 && liveNeighbors < 2) {
                            cell = makeDead(cell);
                        } else if (cell == 1 && liveNeighbors >= 2 && liveNeighbors <= 3) {
                            cell = makeAlive(cell);
                        } else if (cell == 1 && liveNeighbors > 3) {
                            cell = makeDead(cell);
                        }
                        if (cell == 0 && liveNeighbors == 3) {
                            cell = makeAlive(cell);
                        }
                        world[i][j] = cell;
                    }
                }
            };

            let step = () => {
                console.log(drawWorld());
                survival();
            };

            setInterval(() => {
                step();
            }, 1000);
        </script>
    </body>
</html>
