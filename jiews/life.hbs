<!DOCTYPE html>
<html>
    <head>
        <title>Life</title>
        <link rel="icon" href="https://pbs.twimg.com/profile_images/1103056143322996736/yFwE2PJv_400x400.png">
    </head>
    <body>
        <canvas id="game" width="800" height="800" style="border:1px solid #000000;">
            Your browser does not support canvas. Thank you.
        </canvas>

        <script src="https://cdnjs.cloudflare.com/ajax/libs/pixi.js/5.1.0/pixi.min.js"></script>
        <script>
            /*
             1. Any live cell with fewer than two live neighbours dies, as if by underpopulation.
             2. Any live cell with two or three live neighbours lives on to the next generation.
             3. Any live cell with more than three live neighbours dies, as if by overpopulation.
             4. Any dead cell with three live neighbours becomes a live cell, as if by reproduction.
            */

            let canvas = document.getElementById("game");
            let ctx = canvas.getContext("2d");
            let width = canvas.width;
            let height = canvas.height;
            let cellSize = 30;

            ctx.fillStyle = "#808080";

            let world = [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 1, 1, 0, 0],
                [0, 1, 0, 0, 0, 0, 0, 0, 1, 1],
                [0, 1, 0, 0, 0, 0, 0, 0, 1, 1],
                [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                [0, 0, 0, 1, 0, 1, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            ];

            let size = world.length;


            // Print world to console
            let drawWorldToConsole = () => {
                let amountOfHyphens = size * 3;
                let hyphens = "";
                for (let i = 0; i < amountOfHyphens; ++i) hyphens += '-';
                let string = `/${hyphens}\\\n`;
                for (let i = 0; i < world.length; i++) {
                    string += "|";
                    for (let j = 0; j < world[0].length; j++) {
                        string += " " + world[i][j] + " ";
                    }
                    string += "|" + "\n";
                }
                string += `\\${hyphens}/\n`;
                console.log(string);
            };

            // Draw world to canvas
            let drawWorldToCanvas = () => {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                for (let i = 0; i < size; i++) {
                    for (let j = 0; j < size; j++) {
                        // Color in cell if has living cell
                        if (world[i][j] == 1) {
                            ctx.fillRect(j * cellSize, i * cellSize, cellSize, cellSize);
                        }
                        // Draw cell
                        ctx.beginPath();
                        ctx.rect(j * cellSize, i * cellSize, cellSize, cellSize);
                        ctx.stroke();
                    }
                }
            };

            let drawWorld = () => {
                drawWorldToConsole();
                drawWorldToCanvas();
            }

            let getNeighbors = (i, j) => {
                let neighbors = [];
                if (i - 1 >= 0 && j - 1 >= 0)
                    neighbors.push(world[i - 1][j - 1]);
                if (i - 1 >= 0 && j >= 0 && j < size)
                    neighbors.push(world[i - 1][j]);
                if (i - 1 >= 0 &&j + 1 >= 0 && j + 1 < size)
                    neighbors.push(world[i - 1][j + 1]);
                if (i >= 0 && i < size && j - 1 >= 0)
                    neighbors.push(world[i][j - 1]);
                if (i >= 0 && i < size && j + 1 >= 0 && j + 1 < size)
                    neighbors.push(world[i][j + 1]);
                if (i + 1 >= 0 && i + 1 < size && j - 1 >= 0)
                    neighbors.push(world[i + 1][j - 1]);
                if (i + 1 >= 0 && i + 1 < size && j >= 0 && j < size)
                    neighbors.push(world[i + 1][j]);
                if (i + 1 >= 0 && i + 1 < size && j + 1 >= 0 && j + 1 < size)
                    neighbors.push(world[i + 1][j + 1]);
                return neighbors;
            };

            let makeAlive = (i, j) => {
                world[i][j] = 1;
                return 1;
            };

            let makeDead = (i, j) => {
                world[i][j] = 0;
                return 0;
            };

            let survival = (currWorld) => {
                let world2 = [];
                for (let i = 0; i < size; i++) {
                    world2[i] = [];
                };

                for (let i = 0; i < size; i++) {
                    for (let j = 0; j < size; j++) {
                        let cell = currWorld[i][j];
                        let neighbors = getNeighbors(i, j);
                        let liveNeighbors = 0;
                        for (let k = 0; k < neighbors.length; k++) {
                            if (neighbors[k] == 1) {
                                liveNeighbors++;
                            }
                        }
                        if (cell == 1 && liveNeighbors < 2) {
                            cell = 0;
                        } else if (cell == 1 && (liveNeighbors == 2 || liveNeighbors == 3)) {
                            cell = 1;
                        } else if (cell == 1 && liveNeighbors > 3) {
                            cell = 0;
                        } else if (cell == 0 && liveNeighbors == 3) {
                            cell = 1;
                        }
                        world2[i][j] = cell;
                    }
                }
                world = world2;
            };

            // main
            let step = () => {
                survival(world);
                drawWorld();
            };

            drawWorld();

            setInterval(() => {
                step();
            }, 200);
        </script>
    </body>
</html>
