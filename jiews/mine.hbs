<!DOCTYPE html>
<html>
    <head>
        <title>Mine</title>
        <link rel="icon" href="https://pbs.twimg.com/profile_images/1103056143322996736/yFwE2PJv_400x400.png">
    </head>
    <body>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/pixi.js/5.1.0/pixi.min.js"></script>
        <script>
            // minesweeper
            let Application = PIXI.Application,
                loader = PIXI.loader,
                resources = PIXI.loader.resources,
                Sprite = PIXI.Sprite,
                Graphics = PIXI.Graphics;

            let app = new Application({
                width: 200,
                height: 200
            });

            app.renderer.backgroundColor = 0xFFFFFF;
            app.renderer.view.style = "border:1px solid #000000;";

            let screenWidth = app.renderer.view.height;
            let screenHeight = app.renderer.view.width;
            document.body.appendChild(app.view);

            // fill tile colors
            let tile = new Graphics();
            for (let i = 0; i < screenWidth/20; i++) {
                for (let j = 0; j < screenWidth/20; j++) {
                    tile.beginFill(0xD3D3D3);
                    tile.drawRect(j * 20, i * 20, 20, 20);
                    tile.endFill();
                }
            }
            app.stage.addChild(tile);

            // draw grid
            let x = 20;
            let y = 20;
            let line = new Graphics();
            line.lineStyle(2, 0x09370A, 1);
            while (x < screenHeight) {
                line.moveTo(x, 0);
                line.lineTo(x, screenHeight);
                app.stage.addChild(line);
                line.moveTo(0, y);
                line.lineTo(screenWidth, y);
                y += 20;
                x += 20;
            }

            // change color on mouse click
            // get bounding clientrect returns the canvas properties
            let block = new Graphics();
            let canvas = app.renderer.view;

            canvas.addEventListener('click', function (e) {
                revealSelectedTile(canvas, e);
            });

            function revealSelectedTile(canvas, event) {
                const rect = canvas.getBoundingClientRect();
                const x = event.clientX - rect.left;
                const y = event.clientY - rect.top;

                let remX = x % 20;
                let remY = y % 20;
                let tileX = (x - remX);
                let tileY = (y - remY);
                block.beginFill(0xFFFFFF);
                block.drawRect(tileX, tileY, 20, 20);
                block.endFill();
                app.stage.addChild(block);

                controllerX.push(tileX/20);
                controllerY.push(tileY/20);

                console.log(controllerX + " " + controllerY);
                for (let i = 0; i < controllerX.length; i++) {
                    console.log(realBoard[controllerY[i]][controllerX[i]]);
                }
                checkTiles();
            }

            // 1 = bomb, 0 = empty
            let size = 10;
            let realBoard = [];
            let chance;
            for (let i = 0; i < size; i++) {
                realBoard[i] = [];
                for (let j = 0; j < size; j++) {
                    chance = Math.random();
                    if (chance > 0.75) {
                        realBoard[i].push(1);
                    } else {
                        realBoard[i].push(0);
                    }
                }
            }

            console.log(realBoard);

            let controllerX = [];
            let controllerY = [];

            function checkTiles() {
                for (let i = 0; i < controllerX.length; i++) {
                    if (realBoard[controllerY[i]][controllerX[i]] ==  1) {
                        alert("dead");
                    }
                }
            }

        </script>
    </body>
</html>
