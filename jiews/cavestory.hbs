<!DOCTYPE html>
<html>
    <body>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/pixi.js/5.1.0/pixi.min.js"></script>
        <script>
            /*
                Make pixi game
                1. Tilebased
                2. Move hero with WASD or arrow keys Done
                3. Prevent hero from moving into terrain it's not allowed on
                4. Prevent hero from moving onto other characters
            */
            let Application = PIXI.Application,
                loader = PIXI.loader,
                resources = PIXI.loader.resources,
                Sprite = PIXI.Sprite,
                Graphics = PIXI.Graphics;

            let app = new Application({
                width: 600,
                height: 600,
                antialias: true,
                transparent: false,
                resolution: 1
            });
            app.renderer.backgroundColor = 0xFFFFFF;
            app.renderer.view.style = "border:1px solid #000000;";

            document.body.appendChild(app.view);

            let gameHeight = app.renderer.view.height;
            let gameWidth = app.renderer.view.width;
            let tileSize = 40;

            let x = tileSize;
            let y = tileSize;
            let line = new Graphics();
            line.lineStyle(2, 0x09370A, 1);
            while (x < gameHeight) {
                line.moveTo(x, 0);
                line.lineTo(x, gameHeight);
                app.stage.addChild(line);
                line.moveTo(0, y);
                line.lineTo(gameWidth, y);
                y += tileSize;
                x += tileSize;
            }

            loader
                .add([
                    "../public/images/golem.png"
                ])
                .load(setup);

            let state;
            function setup() {
                // Code that runs after loader is finished loading image.
                let hero = new Sprite(resources["../public/images/golem.png"].texture);
                hero.width = tileSize;
                hero.height = tileSize;

                app.stage.addChild(hero);

                let left = keyboard("ArrowLeft"),
                    up = keyboard("ArrowUp"),
                    right = keyboard("ArrowRight"),
                    down = keyboard("ArrowDown"),
                    left2 = keyboard("a"),
                    up2 = keyboard("w"),
                    right2 = keyboard("d"),
                    down2 = keyboard("s");

                left.press = () => {
                    hero.x -= tileSize;
                };
                up.press = () => {
                    hero.y -= tileSize;
                }
                down.press = () => {
                    hero.y += tileSize;
                }
                right.press = () => {
                    hero.x += tileSize;
                }

                left2.press = () => {
                    hero.x -= tileSize;
                };
                up2.press = () => {
                    hero.y -= tileSize;
                };
                down2.press = () => {
                    hero.y += tileSize;
                };
                right2.press = () => {
                    hero.x += tileSize;
                };

                state = play;
                app.ticker.add(delta => gameLoop(delta));
            }

            function gameLoop(delta) {
                state(delta);
            }

            function play(delta) {

            }

            function keyboard(value) {
                let key = {};
                key.value = value;
                key.isDown = false;
                key.isUp = true;
                key.press = undefined;
                key.release = undefined;

                key.downHandler = event => {
                    if (event.key === key.value) {
                        console.log(event.key);
                        if (key.isUp && key.press) key.press();
                        key.isDown = true;
                        key.isUp = false;
                        event.preventDefault();
                    }
                };

                key.upHandler = event => {
                    if (event.key === key.value) {
                        if (key.isDown && key.release) key.release();
                        key.isDown = false;
                        key.isUp = true;
                        event.preventDefault();
                    }
                };

                const downListener = key.downHandler.bind(key);
                const upListener = key.upHandler.bind(key);

                window.addEventListener(
                    "keydown", downListener, false
                    );
                window.addEventListener(
                    "keyup", upListener, false
                    );

                key.unsubscribe = () => {
                    window.removeEventListener("keydown", downListener);
                    window.removeEventListener("keyup", upListener);
                };
                console.log(key);
                return key;
            }
        </script>
    </body>
</html>
