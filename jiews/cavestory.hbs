<!DOCTYPE html>
<html>
    <body>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/pixi.js/5.1.0/pixi.min.js"></script>
        <script>
            /*
                Make pixi game
                1. Tilebased
                2. Move hero with WASD or arrow keys Done
                3. Prevent hero from moving into terrain it's not allowed on
                4. Prevent hero from moving onto other characters
            */
            let Application = PIXI.Application,
                loader = PIXI.loader,
                resources = PIXI.loader.resources,
                Sprite = PIXI.Sprite,
                Graphics = PIXI.Graphics;

            let app = new Application({
                width: 400,
                height: 400,
                antialias: true,
                transparent: false,
                resolution: 1
            });
            app.renderer.backgroundColor = 0xFFFFFF;
            app.renderer.view.style = "border:1px solid #000000;";

            document.body.appendChild(app.view);

            let gameHeight = app.renderer.view.height;
            let gameWidth = app.renderer.view.width;
            let tileSize = 20;
            let state;

            let trees = {{{trees}}};
            let gameWorld = {{{gameWorld}}};
            let tree;

            loader
                .add([
                    "../public/images/golem.png",
                    "../public/images/tree.png"
                ])
                .load(setup);

            function setup() {
                // Code that runs after loader is finished loading image.
                let tile = new Graphics();
                // Fills tiles with green and blue
                for (let i = 0; i < gameWidth/tileSize; i++) {
                    for (let j = 0; j < gameWidth/tileSize; j++) {
                        if (gameWorld[i][j] == 'D') {
                            tile.beginFill(0x136D15);
                        } else if (gameWorld[i][j] == 'W') {
                            tile.beginFill(0x0033cc);
                        }
                        tile.drawRect(j * tileSize, i * tileSize, tileSize, tileSize);
                        tile.endFill();
                    }
                }
                app.stage.addChild(tile);

                // draw tiles

                // draw heros
                let hero = new Sprite(resources["../public/images/golem.png"].texture);
                hero.width = tileSize;
                hero.height = tileSize;
                hero.xPos = 0;
                hero.yPos = 0;

                app.stage.addChild(hero);

                // movements
                let left = keyboard("ArrowLeft"),
                    up = keyboard("ArrowUp"),
                    right = keyboard("ArrowRight"),
                    down = keyboard("ArrowDown"),
                    left2 = keyboard("a"),
                    up2 = keyboard("w"),
                    right2 = keyboard("d"),
                    down2 = keyboard("s");

                // arrow keys
                left.press = () => {
                    hero.x -= tileSize;
                };
                up.press = () => {
                    hero.y -= tileSize;
                };
                down.press = () => {
                    hero.y += tileSize;
                };
                right.press = () => {
                    hero.x += tileSize;
                };

                let isCanDoingWalkingOnThis = (x, y) => {
                    x = x/tileSize;
                    y = y/tileSize;
                    console.log(x + " " + y);
                    if (x < 0 || y < 0 || x >= gameWorld[0].length || y >= gameWorld.length || gameWorld[y][x] == 'W') {
                        return false;
                    }

                    for (let i = 0; i < trees.length; i++) {
                        let tree = trees[i];
                        if (tree.x == x && tree.y == y) {
                            return false;
                        }
                    }
                    return true;
                };

                // wasd
                let moveHero = () => {
                    hero.x = hero.xPos * tileSize;
                    hero.y = hero.yPos * tileSize;
                }

                left2.press = () => {
                    if (isCanDoingWalkingOnThis(hero.x - tileSize, hero.y))
                        hero.x -= tileSize;
                    moveHero();
                };
                up2.press = () => {
                    if (isCanDoingWalkingOnThis(hero.x, hero.y - tileSize))
                        hero.y -= tileSize;
                    moveHero();
                };
                down2.press = () => {
                    if (isCanDoingWalkingOnThis(hero.x, hero.y + tileSize))
                        hero.y += tileSize;
                    moveHero();
                };
                right2.press = () => {
                    if (isCanDoingWalkingOnThis(hero.x + tileSize, hero.y))
                        hero.x += tileSize;
                    moveHero();
                };

                // draw trees
                for (let i = 0; i < trees.length; i++) {
                    for (let j = 0; j < trees.length; j++) {
                        for (let treeIndex = 0; treeIndex < trees.length; treeIndex++) {
                            if (trees[treeIndex].x == j && trees[treeIndex].y == i) {
                                tree = new Sprite(resources["../public/images/tree.png"].texture);
                                tree.x = j * tileSize;
                                tree.y = i * tileSize;
                                tree.width = tileSize;
                                tree.height = tileSize;
                                app.stage.addChild(tree);
                            }
                        }
                    }
                }
                state = play;
                // idk
                app.ticker.add(delta => gameLoop(delta));
            }

            function gameLoop(delta) {
                state(delta);
            }

            function play(delta) {

            }

            function keyboard(value) {
                let key = {};
                key.value = value;
                key.isDown = false;
                key.isUp = true;
                key.press = undefined;
                key.release = undefined;

                key.downHandler = event => {
                    if (event.key === key.value) {
                        if (key.isUp && key.press) key.press();
                        key.isDown = true;
                        key.isUp = false;
                        event.preventDefault();
                    }
                };

                key.upHandler = event => {
                    if (event.key === key.value) {
                        if (key.isDown && key.release) key.release();
                        key.isDown = false;
                        key.isUp = true;
                        event.preventDefault();
                    }
                };

                const downListener = key.downHandler.bind(key);
                const upListener = key.upHandler.bind(key);

                window.addEventListener(
                    "keydown", downListener, false
                    );
                window.addEventListener(
                    "keyup", upListener, false
                    );

                key.unsubscribe = () => {
                    window.removeEventListener("keydown", downListener);
                    window.removeEventListener("keyup", upListener);
                };
                
                return key;
            }

        </script>
    </body>
</html>
