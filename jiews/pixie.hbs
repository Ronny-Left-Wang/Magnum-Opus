<!DOCTYPE html>
<html>
    <body>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/pixi.js/5.1.0/pixi.min.js"></script>
        <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
        <script>
            // TODO Load and draw sprites from root page (can be any size and position)
            // let app = new PIXI.Application({width: 400, height: 400});
            // document.body.appendChild(app.view);

            /* Converts ordinary image file to  WebGL texture. Pixi uses texture cache to 
                store all the texture sprites. */
            // PIXI.utils.TextureCache["../public/images/bunny.png"];
            // Using Pixi's sprite class to make new sprite using the texture.
            // let texture = PIXI.utils.TextureCache["../public/images/bunny.png"];
            // loader loads the image and converts it into a texture.
            /*
            PIXI.loader
                .add([
                    "../public/images/bunny.png",
                    "../public/images/tree.png",
                    "../public/images/golem.png"
                ])
                .load(setup);

            function setup() {
                // Code that runs after loader is finished loading image.
                let bunny = new PIXI.Sprite(PIXI.loader.resources["../public/images/bunny.png"].texture);
                let golem = new PIXI.Sprite(PIXI.loader.resources["../public/images/golem.png"].texture);
                app.stage.addChild(bunny);
                app.stage.addChild(golem);
                // To make DISAPPEAR: bunny.visible = false;
            }
            */

            /* Aliases for less typing: 
                let TextureCache = PIXI.utils.TextureCache
                let texture = TextureCache["images/cat.png
             */

            /*** BETTER VERSION using aliases ***/
            let Application = PIXI.Application,
                loader = PIXI.loader,
                resources = PIXI.loader.resources,
                Sprite = PIXI.Sprite,
                Graphics = PIXI.Graphics;

            let app = new Application({
                width: 400,
                height: 400,
                antialias: true,
                transparent: false,
                resolution: 1
            });

            let gameHeight = app.renderer.view.height;
            let gameWidth = app.renderer.view.width;

            let guy1Arr = {{{guy1arr}}};
            let guy2Arr = {{{guy2arr}}};
            let bunnyArr = {{{bunnyarr}}};
            let trees = {{{trees}}};

            app.renderer.backgroundColor = 0xFFFFFF;
            app.renderer.view.style = "border:1px solid #000000;";
            // This adds the canvas Pixi automatically created to the HTML document
            document.body.appendChild(app.view);

            loader
                .add([
                    "../public/images/bunny.png",
                    "../public/images/tree.png",
                    "../public/images/golem.png"
                ])
                .load(setup);

            function setup() {
                // Code that runs after loader is finished loading image.
                let bunny = new Sprite(resources["../public/images/bunny.png"].texture);
                let guy1 = new Sprite(resources["../public/images/golem.png"].texture);
                let guy2 = new Sprite(resources["../public/images/golem.png"].texture);
                let bunnyPos = bunnyArr[bunnyArr.length - 1];
                let guy1Pos = guy1Arr[guy1Arr.length - 1];
                let guy2Pos = guy2Arr[guy2Arr.length - 1];
                let tree; 

                bunny.x = bunnyPos.x * 20;
                bunny.y = bunnyPos.y * 20;
                guy1.x = guy1Pos.x * 20;
                guy1.y = guy1Pos.y * 20;
                guy2.x = guy2Pos.x * 20;
                guy2.y = guy2Pos.y * 20;

                bunny.width = 20;
                bunny.height = 20;
                guy1.width = 20;
                guy1.height = 20;
                guy2.width = 20;
                guy2.height = 20;

                app.stage.addChild(bunny);
                app.stage.addChild(guy1);
                app.stage.addChild(guy2);

                for (let i = 0; i < trees.length; i++) {
                    for (let j = 0; j < trees.length; j++) {
                        for (let treeIndex = 0; treeIndex < trees.length; treeIndex++) {
                            if (trees[treeIndex].x == j && trees[treeIndex].y == i) {
                                tree = new Sprite(resources["../public/images/tree.png"].texture);
                                tree.x = j * 20;
                                tree.y = i * 20;
                                tree.width = 20;
                                tree.height = 20;
                                app.stage.addChild(tree);
                            }
                        }
                    }
                }
            }
            // Stopped reading at positioning sprites.

            // TODO Create the grid and tiles
            let x = 20;
            let y = 20;
            let line = new Graphics();
            line.lineStyle(2, 0x09370A, 1);
            while (x < gameHeight) {
                line.moveTo(x, 0);
                line.lineTo(x, gameHeight);
                app.stage.addChild(line);
                line.moveTo(0, y);
                line.lineTo(gameWidth, y);
                y += 20;
                x += 20;
            }

            // TODO Set the sprites to the proper positions and size
            // TODO Make the bunny move randomly
            // TODO Add key listeners to move the guys
            // keyCodes:
            // a=65 s=83 d=68 w=87
            // i=73 j=74 k=75 l=76
            let action = "none";
            var action2 = "none";
            window.addEventListener('keydown', function(e) {
                switch(e.keyCode) {
                case 65:
                    action = "left";
                    break;
                case 83:
                    action = "down";
                    break;
                case 68:
                    action = "right";
                    break;
                case 87:
                    action = "up";
                    break;
                case 74:
                    action2 = "left";
                    break;
                case 75:
                    action2 = "down";
                    break;
                case 76:
                    action2 = "right";
                    break;
                case 73:
                    action2 = "up";
                    break;
                default:
                    action = "none";
                }
                $.ajax({
                    type: "POST",
                    url: "/",
                    data: {
                        action: action,
                        action2: action2
                    },
                    success: function() {
                        console.log("Moved " + action);
                    }
                });
                let loc = window.location.pathname;
                let dir = loc.substring(0, loc.lastIndexOf('/'));
                window.location.replace(dir);
            });
        </script>
    </body>
</html>
