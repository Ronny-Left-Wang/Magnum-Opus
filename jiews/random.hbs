<!DOCTYPE html>
<html>
    <head>
        <title>Pixi</title>
        <link rel="icon" href="https://pbs.twimg.com/profile_images/1103056143322996736/yFwE2PJv_400x400.png">
    </head>
    <body>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/pixi.js/5.1.0/pixi.min.js"></script>
        <script>
            /*
            I am manchild sleep 5am. That means I wake up at 2pm. While I'm asleep I want u to work on snake game. 
            1. First I want u to create a cookie. If ur snake touches cookie, cookie disappears, and a new cookie spawns.
            2. Then create enemies where if snake run into them, he dies.
            3. Every time a snake eats a cookie a new enemy gets created.
            Temptation? Just DEFEAT IT
            */

            // for less typing, easier to edit later on if they have updates.
            let Application = PIXI.Application,
                loader = PIXI.loader,
                resources = PIXI.loader.resources,
                Sprite = PIXI.Sprite,
                Graphics = PIXI.Graphics;

            // creates canvas using pixi
            let app = new Application({
                width: 600,
                height: 600
            });

            // attaches canvas to body
            document.body.appendChild(app.view);

            let screenHeight = app.renderer.view.height;
            let screenWidth = app.renderer.view.width;

            // get the sprites
            loader
                .add([
                    "../public/images/golem.png",
                    "../public/images/cookie.png",
                    "../public/images/tree.png"
                    ])
                    .load(setup);

            const cookieWidth = 20;
            const cookieHeight = 20;

            let player;
            let cookie;
            let enemy;
            let enemies = [];
            let velX = 0;
            let velY = 0;
            let speed = 5;
            let score = 0;

            // keeps player in game screen
            let containPlayer = () => {
                if (player.x + player.width > screenWidth) {
                    player.x = screenWidth - player.width;
                    velX = 0;
                }
                if (player.x < 0) {
                    player.x = 0;
                    velX = 0;
                }
                if (player.y > screenHeight - player.height) {
                    player.y = screenHeight - player.height;
                    velY = 0;
                }
                if (player.y < 0) {
                    player.y = 0;
                    velY = 0;
                }
            };

            // player movement
            let movePlayer = (e) => {
                let value = e.keyCode;

                if (value == 65 && velX <= 0) {
                    velX = 0;
                    velY = 0;
                    velX -= speed;
                } else if (value == 68 && velX >= 0) {
                    velX = 0;
                    velY = 0;
                    velX += speed;
                } else if (value == 87 && velY <= 0) {
                    velX = 0;
                    velY = 0;
                    velY -= speed;
                } else if (value == 83 && velY >= 0) {
                    velX = 0;
                    velY = 0;
                    velY += speed;
                }
            };

            // spawns object at random location on canvas
            function spawnObject(obj, objWidth, objHeight) {
                let randomX = Math.random() * (screenWidth - objWidth);
                let randomY = Math.random() * (screenHeight - objHeight);
                obj.x = randomX;
                obj.y = randomY;
                obj.width = objWidth;
                obj.height = objHeight;
                app.stage.addChild(obj);
            }

            function setup() {
                player = new Sprite(resources["../public/images/golem.png"].texture);
                player.width *= 0.6;
                player.height *= 0.6;
                cookie = new Sprite(resources["../public/images/cookie.png"].texture);
                player.isDead = false;

                spawnObject(cookie, cookieWidth, cookieHeight);

                app.stage.addChild(player);
                app.stage.addChild(cookie);

                state = play;
                app.ticker.add(delta => gameLoop(delta));
            }

            function gameLoop(delta) {
                state(delta);
            }

            function play(delta) {
                if (player.isDead) {
                    return;
                }
                player.x += velX;
                player.y += velY;
                containPlayer();

                // if there is collision...
                if (checkCollision(player, cookie)) {
                    let cookieWidth = cookie.width;
                    let cookieHeight = cookie.height;
                    cookie.destroy();
                    player.height *= 1.1;
                    player.width *= 1.1;
                    speed += 0.5;
                    score += 1;

                    newCookie = new Sprite(resources["../public/images/cookie.png"].texture);
                    spawnObject(newCookie, cookieWidth, cookieHeight);
                    cookie = newCookie;

                    enemy = new Sprite(resources["../public/images/tree.png"].texture);
                    spawnObject(enemy, enemy.width * 0.05, enemy.height * 0.05); // can be cleaned up
                    enemies.push(enemy);
                }

                for (let i = 0; i < enemies.length; i++) {
                    enemy = enemies[i];
                    if (typeof enemy != "undefined") {
                        if (checkCollision(player, enemy)) {
                            player.destroy();
                            player.isDead = true;
                            alert("You collected " + score + " cookies");
                            break;
                        }
                    }
                }
            }

            function checkCollision(rect1, rect2) {
                return rectBInRectA(rect1, rect2) || rectBInRectA(rect2, rect1);
            }

            function rectBInRectA(A, B) {
                // i am going to check every point of B TO SE IF INSIDE Aj A A a u like zi yun
                // TOP LEFT
                // look i check if x is out side of A
                let topLeft = {
                    x: B.x,
                    y: B.y
                }
                if (pointInRect(topLeft, A)) return true;

                // TOP RIGHT
                let topRight = {
                    x: B.x + B.width,
                    y: B.y
                }
                if (pointInRect(topRight, A)) return true;

                // BOTTOM LEFT
                let bottomLeft = {
                    x: B.x,
                    y: B.y + B.height
                }
                if (pointInRect(bottomLeft, A)) return true;

                // BOTTOM RIGHT
                let bottomRight = {
                    x: B.x + B.width,
                    y: B.y + B.height
                }
                if (pointInRect(bottomRight, A)) return true;

                return false;
            }

            function pointInRect(point, rect) {
                if (point.x >= rect.x && point.x <= rect.x + rect.width &&
                    point.y >= rect.y && point.y <= rect.y + rect.height) return true;
                return false;
            }

            window.addEventListener("keydown", (e) => movePlayer(e));
        </script>
    </body>
</html>
